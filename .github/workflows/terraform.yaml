name: 'Terraform'
permissions:
  id-token: write # Required to fetch the JWT OIDC Token
  contents: read # Actions/checkout
# Run Pipeline on push or merge requests on the main branch if environment in aws-envs was changed. Alternatively run manually in GitHub.
on:
  push:
    branches: [ "main" ]
    paths: ["aws-envs/**","aws_envs/**",".github/workflows"]
  pull_request:
    branches: [ "main" ]
    paths: ["aws-envs/**","aws_envs/**"]
  workflow_dispatch:
defaults:
  run:
    shell: bash
    working-directory: aws_envs #TODO: Add logic to account for different naming (aws-envs and aws_envs)
jobs:
    terraform:
        name: 'Terraform'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: hashicorp/setup-terraform@v3
            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                audience: 'sts.amazonaws.com'
                aws-region: eu-central-1 #TODO: Always eu-central? Put in secrets?
                role-to-assume: arn:aws:iam::870615114862:role/github_actions_role #TODO: Dynamic Account ID? -> Secrets arn:aws:iam::XX$XXX{{ secrets.AWS_ACCOUNT_ID }}:role/github_actions_role
            - name: Terraform init
              run: terraform init
            - name: Terraform validate
              run: terraform validate
            - name: Terraform plan
              run: terraform plan
            - uses: actions/github-script@v7 # Comment on Pull Request
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>

                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`

                  </details>

                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`

                  </details>

                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })
            - uses: trstringer/manual-approval@v1
              with:
                secret: ${{ github.TOKEN }}
                approvers: laysauchoa
                minimum-approvals: 1
                issue-title: "Deploying v1.0.0 to prod"
                issue-body: "Review the terraform plan, then approve or deny the deployment of v1.0.0 to prod."
                exclude-workflow-initiator-as-approver: false
            - name: Terraform apply
              run: terraform apply --auto-approve




    # apply:
    # destroy:
