name: 'Terraform Plan'
permissions:
  id-token: write # Required to fetch the JWT OIDC Token
  contents: read # Actions/checkout
  issues: write
  pull-requests: write
# Run Pipeline on push or merge requests on the main branch if environment in aws-envs was changed. Alternatively run manually in GitHub.
on:
  push:
    branches: [ "main" ]
    paths: ["aws-envs/**","aws_envs/**",".github/workflows/**"] # TODO: Remove after testing.Remove if all repoitorie use the same name.
  pull_request:
    branches: [ "main" ]
    paths: ["aws-envs/**","aws_envs/**"]
  workflow_dispatch:

defaults:
  run:
    shell: bash
jobs:
    terraform:
          name: 'Terraform Plan'
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
            - name: 'Set working directory'
              id: set_working_dir
              run: |
                if [ -d "aws-envs" ]; then
                  echo "WORKING_DIR=aws-envs" >> $GITHUB_ENV
                elif [ -d "aws_envs" ]; then
                  echo "WORKING_DIR=aws_envs" >> $GITHUB_ENV
                else
                  echo "Error: Directories 'aws-envs's & 'aws_envs' don't exist."
                  exit 1
                fi
            - uses: actions/checkout@v4
            - uses: hashicorp/setup-terraform@v3
            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                audience: 'sts.amazonaws.com'
                aws-region: eu-central-1 #TODO: Always eu-central? Put in secrets?
                role-to-assume: arn:aws:iam::870615114862:role/github_actions_role #TODO: Dynamic Account ID? -> Secrets arn:aws:iam::XX$XXX{{ secrets.AWS_ACCOUNT_ID }}:role/github_actions_role
            - name: init
              id: init
              run: terraform init
              working-directory: ${{ env.WORKING_DIR }}
            - name: validate
              id: validate
              run: terraform validate
              working-directory: ${{ env.WORKING_DIR }}
            - name: fmt
              id: fmt
              run: terraform fmt -check
              working-directory: ${{ env.WORKING_DIR }}
            - name: plan
              id: plan
              run: terraform plan
              working-directory: ${{ env.WORKING_DIR }}
            - uses: actions/github-script@v7 # Comment on Pull Request
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.Plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>

                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`

                  </details>

                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`

                  </details>

                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })





    # apply:
    # destroy:
